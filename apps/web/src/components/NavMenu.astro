---
import type { Router } from 'src/capabilities/router';
import * as core from 'src/core';
import PageSearch from 'src/components/PageSearch.astro';

interface Props {
  router: Router;
}

const { router } = Astro.props;
---
<nav-menu class="nav-menu text-base">
	<button
		class=""
		data-type="show-trigger"
	>
    Menu
	</button>
  <div
    class="menu z-50 fixed top-0 left-0 min-h-screen w-full bg-white"
    data-type="menu"
  >
    <div
      class="flex flex-col max-w-5xl w-11/12 m-auto"
    >
      <div class="h-16 flex flex-wrap items-center justify-between w-full">
        <ul class="flex justify-items-start items-center">
          <li class="md:mr-14 mr-6 text-base">
            <a class="font-semibold text-base text-gray-700" href={core.path.fromPathByLocale('/')(router.locale)}>
              Eriko Ikeda Kay
            </a>
          </li>
        </ul>
        <ul class="flex justify-items-start items-center">
          <li>
            <button
              class=""
              data-type="hide-trigger"
            >
              Close
            </button>
          </li>
        </ul>
      </div>
      <div class="flex flex-col flex-grow md:mt-16 mt-8">
        <slot />
      </div>
    </div>
  </div>
</nav-menu>
<style>
  .nav-menu {
    & .menu {
      @apply hidden;
      &.active {
        @apply block;
      }
    }
  }
</style>
<script>
  type Config = {
    window: Window;
    container: HTMLElement;
  }

  const main = (config: Config) => {
    const showTrigger = config.container.querySelector('button[data-type="show-trigger"]')
    const hideTrigger = config.container.querySelector('button[data-type="hide-trigger"]')
    const menu = config.container.querySelector('[data-type="menu"]')

    const handleShowTriggerClick = () => {
      menu?.classList.add('active');
    }
    const handleHideTriggerClick = () => {
      menu?.classList.remove('active');
    }

    showTrigger?.addEventListener('click', handleShowTriggerClick);
    hideTrigger?.addEventListener('click', handleHideTriggerClick);
    return () => {
      showTrigger?.removeEventListener('click', handleShowTriggerClick);
      hideTrigger?.removeEventListener('click', handleHideTriggerClick);
    }
  }

  class NavMenu extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      main({
        window: window,
        container: this,
      })
    }
  }

  customElements.define("nav-menu", NavMenu);
</script>
