---
import * as IO from 'fp-ts/lib/IO';
import * as Eq from 'fp-ts/lib/Eq';
import * as Task from 'fp-ts/lib/Task';
import * as ReaderTask from 'fp-ts/lib/ReaderTask';
import * as ReadonlyArray from 'fp-ts/lib/ReadonlyArray';
import * as Option from 'fp-ts/lib/Option';
import * as string from 'fp-ts/lib/string';
import { pipe } from 'fp-ts/lib/function';
import type * as core from 'src/core';
import * as array from 'src/lib/array';
import * as app from 'src/app';
import Root from 'src/layouts/Root.astro';
import Body from 'src/layouts/Body.astro';
import Head from 'src/layouts/Head.astro';
import Translation from 'src/views/Translation.astro';

export const getStaticPaths = async () => {
  return pipe(
    Task.fromIO(app.getAppContext),
    Task.map(context => ({
      ...context,
      locale: 'en' as const,
    })),
    Task.chain(pipe(
        ReaderTask.Do,
        ReaderTask.apS('translations', app.getTranslations),
        ReaderTask.map(({ translations }) => pipe(
          translations,
          ReadonlyArray.map(translation => ({
            params: { id: translation.id }
          })),
        )),
      ))
  )()
}

const main = async () => {
  const { id } = Astro.params;
  return pipe(
    Task.fromIO(app.getAppContext),
    Task.map(context => ({
      ...context,
      locale: 'en' as const,
    })),
    Task.chain(pipe(
        ReaderTask.Do,
        ReaderTask.apS('context', ReaderTask.ask<app.types.AppPageContext>()),
        ReaderTask.bind('router', ({context}) => ReaderTask.of(app.toRouter(context))),
        ReaderTask.bind('time', ({context}) => ReaderTask.of(app.toTime(context))),
        ReaderTask.apS('localization', app.getLocalization),
        ReaderTask.apS('translations', app.getTranslations),
        ReaderTask.bind('translation', ({ translations }) => pipe(
          translations,
          ReadonlyArray.findFirst(translation => translation.id === id),
          Option.fold(
            () => () => {
               throw new Error('translation not found');
            },
            translation => IO.of(translation)
          ),
          ReaderTask.fromIO
        )),
        ReaderTask.bind('prevTranslation', ({ translation, translations }) => pipe(
          ReaderTask.of(pipe(
            translations,
            array.before<core.types.Translation>(pipe(
              string.Eq,
              Eq.contramap(t => t.id)
            ))(translation)
          ))
        )),
        ReaderTask.bind('nextTranslation', ({ translation, translations }) => pipe(
          ReaderTask.of(pipe(
            translations,
            array.after<core.types.Translation>(pipe(
              string.Eq,
              Eq.contramap(t => t.id)
            ))(translation)
          ))
        )),
      ))
  )()
}

const {
  router,
  time,
  localization,
  translation,
  prevTranslation,
  nextTranslation
} = await main();
---
<Root router={router}>
  <Head title={translation.title}>
    <meta name="description" content={translation.description}/>
    <meta name="og:description" content={translation.description}/>
    {translation.tags.length > 0 && <meta name="keywords" content={translation.tags.map(tag => tag.id).join(',')}/>}
  </Head>
  <Body localization={localization} router={router} time={time}>
    <Translation router={router} translation={translation} prevTranslation={prevTranslation} nextTranslation={nextTranslation}/>
  </Body>
</Root>
